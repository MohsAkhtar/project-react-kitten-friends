{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","kittens","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestKittens","_this$props","searchField","onSearchChange","isPending","filteredKittens","filter","kitten","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchKittens","requestKittens","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateKittens","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79660cb5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img\r\n        src={`https://robohash.org/${id}?size=200x200&set=set4`}\r\n        alt=\"kittens\"\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ kittens }) => {\r\n  return (\r\n    <div>\r\n      {kittens.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={kittens[i].id}\r\n            name={kittens[i].name}\r\n            email={kittens[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Search Kittens\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search kittens\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\n// here we are rendering the children within Scroll\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"500px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  // try catch block for react\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  // checks if there is error if not renders children\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops that is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField, requestKittens } from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchKittens.searchField,\r\n    kittens: state.requestKittens.kittens,\r\n    isPending: state.requestKittens.isPending,\r\n    error: state.requestKittens.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestKittens: () => dispatch(requestKittens())\r\n  };\r\n};\r\n\r\n// any component that owns state uses class syntax so they can use constructor function to create\r\n// this.state\r\nclass App extends Component {\r\n  // on mounting we update kittens array by fetching data from jsonplaceholder api\r\n  componentDidMount() {\r\n    this.props.onRequestKittens();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, kittens, isPending } = this.props;\r\n\r\n    const filteredKittens = kittens.filter(kitten => {\r\n      return kitten.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    if (isPending) {\r\n      return <h1 className=\"tc\">Loading</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">Kitty Friends</h1>\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList kittens={filteredKittens} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_KITTENS_PENDING,\r\n  REQUEST_KITTENS_SUCCESS,\r\n  REQUEST_KITTENS_FAILED\r\n} from \"./constants.js\";\r\n\r\n// Capitalise type as it is a constant\r\nexport const setSearchField = text => ({\r\n  type: \"CHANGE_SEARCHFIELD\",\r\n  payload: text\r\n});\r\n\r\nexport const requestKittens = () => dispatch => {\r\n  dispatch({ type: REQUEST_KITTENS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_KITTENS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_KITTENS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\n\r\nexport const REQUEST_KITTENS_PENDING = \"REQUEST_KITTENS_PENDING\";\r\nexport const REQUEST_KITTENS_SUCCESS = \"REQUEST_KITTENS_SUCCESS\";\r\nexport const REQUEST_KITTENS_FAILED = \"REQUEST_KITTENS_FAILED\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_KITTENS_PENDING,\r\n  REQUEST_KITTENS_SUCCESS,\r\n  REQUEST_KITTENS_FAILED\r\n} from \"./constants.js\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchKittens = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateKittens = {\r\n  isPending: false,\r\n  kittens: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestKittens = (state = initialStateKittens, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_KITTENS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_KITTENS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        kittens: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_KITTENS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\nimport { searchKittens, requestKittens } from \"./reducers\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchKittens, requestKittens });\r\n\r\n// we use the store to store all state and pass it down as a prop\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\n// Provider component passes down store\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}